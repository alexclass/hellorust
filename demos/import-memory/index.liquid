permalink: "/demos/import-memory"
title: "Demo: Import memory"
layout: site.liquid
---
<h2>Import memory buffer</h2>

<input type="text" id="output" readonly>

<script src="/demos/bundle.js"></script>
<script>
  window.Module = {}

  const memory = new WebAssembly.Memory({initial: 20});
  const imports = {
    env: {
      memory: memory
    }
  };
  fetchAndInstantiate("./string-passing.wasm", imports)
    .then(mod => {
      Module.memory      = memory;
      Module.alloc       = mod.exports.alloc;
      Module.dealloc     = mod.exports.dealloc;
      Module.dealloc_str = mod.exports.dealloc_str;
      Module.roundtrip   = function(str) {
        let buf = newString(Module, str);
        let outptr = mod.exports.roundtrip(buf);
        let result = copyCStr(Module, outptr);
        Module.dealloc(buf);
        Module.dealloc(outptr);
        return result;
      };

      var output = document.getElementById("output");
      output.value = Module.roundtrip("This string was passed through WebAssembly")
    });
</script>

<hr />

<h2>The Code</h2>

<p>
  <a href="./string-passing.rs">Download string-passing.rs</a>
  <br />
  <a href="./string-passing.wat">Download string-passing.wat (WebAssembly text format)</a>
</p>
<p>
  The Rust code for this example does nothing but returning the data passed to it (plus some allocation functions).
  It uses one special attribute though: 

  <pre><code class="rust">#![wasm_import_memory]</code></pre>

  With this attribute the WebAssembly module will not export its own memory buffer,
  but instead import the memory from the environment, letting the caller set it up.
  In the future it will be possible to use a <code>SharedArrayBuffer</code> in order to share memory between multiple modules easily.
</p>

<p>
  The code (without allocation functions) is:
</p>

<pre><code class="rust">#![feature(wasm_import_memory)]
#![wasm_import_memory]

use std::os::raw::c_char;

#[no_mangle]
pub extern "C" fn roundtrip(data: *mut c_char) -> *mut c_char {
    data
}</code></pre>

<p>
The calling JavaScript code needs to instantiate a
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory"><code>WebAssembly.Memory<code></a> object and pass it on instantiation.
</p>

<pre><code class="javascript">window.Module = {}

// Initializing the memory with 20 pages (20 * 64KiB = 1.25 MiB)
const memory = new WebAssembly.Memory({initial: 20});
const imports = {
  env: {
    memory: memory
  }
};

// On instantiation we pass the imports object
fetchAndInstantiate("./string-passing.wasm", imports)
  .then(mod => {
    Module.memory      = memory;
    Module.alloc       = mod.exports.alloc;
    Module.dealloc     = mod.exports.dealloc;
    Module.dealloc_str = mod.exports.dealloc_str;
    Module.roundtrip   = function(str) {
      let buf = newString(Module, str);
      let outptr = mod.exports.roundtrip(buf);
      let result = copyCStr(Module, outptr);
      Module.dealloc(buf);
      Module.dealloc(outptr);
      return result;
    };

    var output = document.getElementById("output");
    output.value = Module.roundtrip("This string was passed through WebAssembly")
  });
</code></pre>
